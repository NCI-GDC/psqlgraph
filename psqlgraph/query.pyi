from typing import Any, Callable, Dict, Iterable, Optional, Union

from sqlalchemy.orm import Query

from psqlgraph import base, edge, node
from psqlgraph import session as s

C = base.CommonBase
E = edge.AbstractEdge
N = node.AbstractNode
VT = Union[bool, float, int, list, str, None]

class GraphQuery(Query):
    package_namespace: Optional[str]
    def __init__(
        self,
        entites: Iterable[Union[E, N]],
        session: Optional[s.GraphSession] = ...,
        package_namespace: Optional[str] = ...,
    ) -> None: ...
    def entity(self) -> Union[E, N]: ...
    def with_edge_to_node(self, edge_type: E, target_node: N) -> "GraphQuery": ...
    def with_edge_from_node(self, edge_type: E, source_node: N) -> "GraphQuery": ...
    def src(self, ids: Iterable[str]) -> "GraphQuery": ...
    def dst(self, ids: Iterable[str]) -> "GraphQuery": ...
    def ids(self, ids: Iterable[str]) -> "GraphQuery": ...
    def not_ids(self, ids: Iterable[str]) -> "GraphQuery": ...
    def path(self, *paths: str) -> "GraphQuery": ...
    def subq_path(
        self,
        path: str,
        filters: Optional[Callable[..., Any]] = ...,
        __recurse_level: int = ...,
    ) -> "GraphQuery": ...
    def subq_without_path(
        self,
        path: str,
        filters: Optional[Callable[..., Any]] = ...,
        __recurse_level: int = ...,
    ) -> "GraphQuery": ...
    def path_via_assoc_proxy(self, *entities: Iterable[C]) -> "GraphQuery": ...
    def props(
        self, props: Optional[Dict[str, VT]] = ..., **kwargs: VT
    ) -> "GraphQuery": ...
    def not_props(
        self, props: Optional[Dict[str, VT]] = ..., **kwargs: VT
    ) -> "GraphQuery": ...
    def null_props(
        self, keys: Optional[Union[str, Iterable[str]]] = ..., *args: str
    ) -> "GraphQuery": ...
    def prop_in(self, key: str, values: Iterable[VT]) -> "GraphQuery": ...
    def prop(self, key: str, value: VT) -> "GraphQuery": ...
    def sysan(
        self, sysans: Optional[Dict[str, Any]] = ..., **kwargs: VT
    ) -> "GraphQuery": ...
    def not_sysan(
        self, sysans: Optional[Dict[str, Any]] = ..., **kwargs: VT
    ) -> "GraphQuery": ...
    def has_sysan(self, keys: Union[str, Iterable[str]]) -> "GraphQuery": ...

def is_list_prop(entity: Union[E, N], prop: str) -> bool: ...
